// source: weather.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  return this || window || global || self || Function('return this')();
}.call(null);

var common_common_pb = require('./common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.io.rulelogic.api.Weather', null, global);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlCreateRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlCreateResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlDeleteRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlDeleteResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlUpdateRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherDmlUpdateResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherSearchByLocationIdRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherSearchListRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.io.rulelogic.api.WeatherSearchListResponse',
  null,
  global
);
goog.exportSymbol('proto.io.rulelogic.api.WeatherSearchResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.Weather = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.Weather, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.Weather.displayName = 'proto.io.rulelogic.api.Weather';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.io.rulelogic.api.WeatherSearchByLocationIdRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.displayName =
    'proto.io.rulelogic.api.WeatherSearchByLocationIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.displayName =
    'proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherSearchResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherSearchResponse.displayName =
    'proto.io.rulelogic.api.WeatherSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherSearchListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherSearchListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherSearchListRequest.displayName =
    'proto.io.rulelogic.api.WeatherSearchListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherSearchListResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.io.rulelogic.api.WeatherSearchListResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.io.rulelogic.api.WeatherSearchListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherSearchListResponse.displayName =
    'proto.io.rulelogic.api.WeatherSearchListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlCreateRequest.displayName =
    'proto.io.rulelogic.api.WeatherDmlCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlCreateResponse.displayName =
    'proto.io.rulelogic.api.WeatherDmlCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlUpdateResponse.displayName =
    'proto.io.rulelogic.api.WeatherDmlUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlUpdateRequest.displayName =
    'proto.io.rulelogic.api.WeatherDmlUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlDeleteResponse.displayName =
    'proto.io.rulelogic.api.WeatherDmlDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.rulelogic.api.WeatherDmlDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.rulelogic.api.WeatherDmlDeleteRequest.displayName =
    'proto.io.rulelogic.api.WeatherDmlDeleteRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.Weather.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.io.rulelogic.api.Weather.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.Weather} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.Weather.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        recordpk: jspb.Message.getFieldWithDefault(msg, 1, ''),
        weatherid: jspb.Message.getFieldWithDefault(msg, 2, ''),
        weathertext: jspb.Message.getFieldWithDefault(msg, 3, ''),
        weathericon: jspb.Message.getFieldWithDefault(msg, 4, ''),
        temperatureimperial: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          5,
          0.0
        ),
        temperaturemetric: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          6,
          0.0
        ),
        temperatureunit: jspb.Message.getFieldWithDefault(msg, 7, ''),
        temperaturefrom: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          8,
          0.0
        ),
        temperatureto: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          9,
          0.0
        ),
        omd:
          (f = msg.getOmd()) &&
          common_common_pb.Omd.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.Weather.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.Weather();
  return proto.io.rulelogic.api.Weather.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.Weather} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.Weather.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setRecordpk(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setWeatherid(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setWeathertext(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setWeathericon(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setTemperatureimperial(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setTemperaturemetric(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setTemperatureunit(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setTemperaturefrom(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setTemperatureto(value);
        break;
      case 20:
        var value = new common_common_pb.Omd();
        reader.readMessage(
          value,
          common_common_pb.Omd.deserializeBinaryFromReader
        );
        msg.setOmd(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.Weather.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.io.rulelogic.api.Weather.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.Weather} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.Weather.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getRecordpk();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getWeatherid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWeathertext();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getWeathericon();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getTemperatureimperial();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getTemperaturemetric();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getTemperatureunit();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getTemperaturefrom();
  if (f !== 0.0) {
    writer.writeDouble(8, f);
  }
  f = message.getTemperatureto();
  if (f !== 0.0) {
    writer.writeDouble(9, f);
  }
  f = message.getOmd();
  if (f != null) {
    writer.writeMessage(20, f, common_common_pb.Omd.serializeBinaryToWriter);
  }
};

/**
 * optional string recordPk = 1;
 * @return {string}
 */
proto.io.rulelogic.api.Weather.prototype.getRecordpk = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setRecordpk = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string weatherId = 2;
 * @return {string}
 */
proto.io.rulelogic.api.Weather.prototype.getWeatherid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setWeatherid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string weatherText = 3;
 * @return {string}
 */
proto.io.rulelogic.api.Weather.prototype.getWeathertext = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setWeathertext = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string weatherIcon = 4;
 * @return {string}
 */
proto.io.rulelogic.api.Weather.prototype.getWeathericon = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setWeathericon = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional double temperatureImperial = 5;
 * @return {number}
 */
proto.io.rulelogic.api.Weather.prototype.getTemperatureimperial = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setTemperatureimperial = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double temperatureMetric = 6;
 * @return {number}
 */
proto.io.rulelogic.api.Weather.prototype.getTemperaturemetric = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setTemperaturemetric = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional string temperatureUnit = 7;
 * @return {string}
 */
proto.io.rulelogic.api.Weather.prototype.getTemperatureunit = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setTemperatureunit = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional double temperatureFrom = 8;
 * @return {number}
 */
proto.io.rulelogic.api.Weather.prototype.getTemperaturefrom = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setTemperaturefrom = function (value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};

/**
 * optional double temperatureTo = 9;
 * @return {number}
 */
proto.io.rulelogic.api.Weather.prototype.getTemperatureto = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setTemperatureto = function (value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};

/**
 * optional Omd omd = 20;
 * @return {?proto.io.rulelogic.api.Omd}
 */
proto.io.rulelogic.api.Weather.prototype.getOmd = function () {
  return /** @type{?proto.io.rulelogic.api.Omd} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Omd, 20)
  );
};

/**
 * @param {?proto.io.rulelogic.api.Omd|undefined} value
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.setOmd = function (value) {
  return jspb.Message.setWrapperField(this, 20, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.Weather} returns this
 */
proto.io.rulelogic.api.Weather.prototype.clearOmd = function () {
  return this.setOmd(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.Weather.prototype.hasOmd = function () {
  return jspb.Message.getField(this, 20) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        locationid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.io.rulelogic.api.WeatherSearchByLocationIdRequest();
    return proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setLocationid(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getLocationid();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional string locationId = 1;
 * @return {string}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.getLocationid =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.setLocationid =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchByLocationIdRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchByLocationIdRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        weatherunit: jspb.Message.getFieldWithDefault(msg, 3, ''),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest();
    return proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readDouble());
          msg.setLatitude(value);
          break;
        case 2:
          var value = /** @type {number} */ (reader.readDouble());
          msg.setLongitude(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setWeatherunit(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getLatitude();
    if (f !== 0.0) {
      writer.writeDouble(1, f);
    }
    f = message.getLongitude();
    if (f !== 0.0) {
      writer.writeDouble(2, f);
    }
    f = message.getWeatherunit();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.getLatitude =
  function () {
    return /** @type {number} */ (
      jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.setLatitude =
  function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
  };

/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.getLongitude =
  function () {
    return /** @type {number} */ (
      jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.setLongitude =
  function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
  };

/**
 * optional string weatherUnit = 3;
 * @return {string}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.getWeatherunit =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.setWeatherunit =
  function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchByGeoPositionRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherSearchResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.io.rulelogic.api.WeatherSearchResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherSearchResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherSearchResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        responsestatus:
          (f = msg.getResponsestatus()) &&
          common_common_pb.ResponseStatus.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse}
 */
proto.io.rulelogic.api.WeatherSearchResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherSearchResponse();
  return proto.io.rulelogic.api.WeatherSearchResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse}
 */
proto.io.rulelogic.api.WeatherSearchResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = new common_common_pb.ResponseStatus();
          reader.readMessage(
            value,
            common_common_pb.ResponseStatus.deserializeBinaryFromReader
          );
          msg.setResponsestatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherSearchResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherSearchResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getResponsestatus();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        common_common_pb.ResponseStatus.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.setWeather = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional ResponseStatus responseStatus = 2;
 * @return {?proto.io.rulelogic.api.ResponseStatus}
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.getResponsestatus =
  function () {
    return /** @type{?proto.io.rulelogic.api.ResponseStatus} */ (
      jspb.Message.getWrapperField(this, common_common_pb.ResponseStatus, 2)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.ResponseStatus|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.setResponsestatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.clearResponsestatus =
  function () {
    return this.setResponsestatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchResponse.prototype.hasResponsestatus =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherSearchListRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherSearchListRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherSearchListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherSearchListRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        skip: jspb.Message.getFieldWithDefault(msg, 1, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
        searchscope: jspb.Message.getFieldWithDefault(msg, 3, 0),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherSearchListRequest();
  return proto.io.rulelogic.api.WeatherSearchListRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherSearchListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setSkip(value);
          break;
        case 2:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setLimit(value);
          break;
        case 3:
          var value = /** @type {!proto.io.rulelogic.api.SearchScope} */ (
            reader.readEnum()
          );
          msg.setSearchscope(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherSearchListRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherSearchListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherSearchListRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getSkip();
    if (f !== 0) {
      writer.writeInt32(1, f);
    }
    f = message.getLimit();
    if (f !== 0) {
      writer.writeInt32(2, f);
    }
    f = message.getSearchscope();
    if (f !== 0.0) {
      writer.writeEnum(3, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional int32 skip = 1;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.getSkip =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.setSkip = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.getLimit =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.setLimit = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional SearchScope searchScope = 3;
 * @return {!proto.io.rulelogic.api.SearchScope}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.getSearchscope =
  function () {
    return /** @type {!proto.io.rulelogic.api.SearchScope} */ (
      jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

/**
 * @param {!proto.io.rulelogic.api.SearchScope} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.setSearchscope =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchListRequest} returns this
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchListRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.rulelogic.api.WeatherSearchListResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherSearchListResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherSearchListResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherSearchListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherSearchListResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        skip: jspb.Message.getFieldWithDefault(msg, 1, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
        weathersList: jspb.Message.toObjectList(
          msg.getWeathersList(),
          proto.io.rulelogic.api.Weather.toObject,
          includeInstance
        ),
        responsestatus:
          (f = msg.getResponsestatus()) &&
          common_common_pb.ResponseStatus.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherSearchListResponse();
  return proto.io.rulelogic.api.WeatherSearchListResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherSearchListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setSkip(value);
          break;
        case 2:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setLimit(value);
          break;
        case 3:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.addWeathers(value);
          break;
        case 4:
          var value = new common_common_pb.ResponseStatus();
          reader.readMessage(
            value,
            common_common_pb.ResponseStatus.deserializeBinaryFromReader
          );
          msg.setResponsestatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherSearchListResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherSearchListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherSearchListResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getSkip();
    if (f !== 0) {
      writer.writeInt32(1, f);
    }
    f = message.getLimit();
    if (f !== 0) {
      writer.writeInt32(2, f);
    }
    f = message.getWeathersList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        3,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getResponsestatus();
    if (f != null) {
      writer.writeMessage(
        4,
        f,
        common_common_pb.ResponseStatus.serializeBinaryToWriter
      );
    }
  };

/**
 * optional int32 skip = 1;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.getSkip =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.setSkip = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.getLimit =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
  };

/**
 * @param {number} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.setLimit = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * repeated Weather weathers = 3;
 * @return {!Array<!proto.io.rulelogic.api.Weather>}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.getWeathersList =
  function () {
    return /** @type{!Array<!proto.io.rulelogic.api.Weather>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.io.rulelogic.api.Weather,
        3
      )
    );
  };

/**
 * @param {!Array<!proto.io.rulelogic.api.Weather>} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.setWeathersList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
  };

/**
 * @param {!proto.io.rulelogic.api.Weather=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.addWeathers =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      3,
      opt_value,
      proto.io.rulelogic.api.Weather,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.clearWeathersList =
  function () {
    return this.setWeathersList([]);
  };

/**
 * optional ResponseStatus responseStatus = 4;
 * @return {?proto.io.rulelogic.api.ResponseStatus}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.getResponsestatus =
  function () {
    return /** @type{?proto.io.rulelogic.api.ResponseStatus} */ (
      jspb.Message.getWrapperField(this, common_common_pb.ResponseStatus, 4)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.ResponseStatus|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.setResponsestatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherSearchListResponse} returns this
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.clearResponsestatus =
  function () {
    return this.setResponsestatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherSearchListResponse.prototype.hasResponsestatus =
  function () {
    return jspb.Message.getField(this, 4) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.io.rulelogic.api.WeatherDmlCreateRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlCreateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlCreateRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        requestmessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlCreateRequest();
  return proto.io.rulelogic.api.WeatherDmlCreateRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRequestmessage(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlCreateRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getRequestmessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.setWeather = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string requestMessage = 2;
 * @return {string}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.getRequestmessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.setRequestmessage =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlCreateRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherDmlCreateResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlCreateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlCreateResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        responsestatus:
          (f = msg.getResponsestatus()) &&
          common_common_pb.ResponseStatus.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlCreateResponse();
  return proto.io.rulelogic.api.WeatherDmlCreateResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = new common_common_pb.ResponseStatus();
          reader.readMessage(
            value,
            common_common_pb.ResponseStatus.deserializeBinaryFromReader
          );
          msg.setResponsestatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlCreateResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getResponsestatus();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        common_common_pb.ResponseStatus.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.setWeather =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional ResponseStatus responseStatus = 2;
 * @return {?proto.io.rulelogic.api.ResponseStatus}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.getResponsestatus =
  function () {
    return /** @type{?proto.io.rulelogic.api.ResponseStatus} */ (
      jspb.Message.getWrapperField(this, common_common_pb.ResponseStatus, 2)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.ResponseStatus|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.setResponsestatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlCreateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.clearResponsestatus =
  function () {
    return this.setResponsestatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlCreateResponse.prototype.hasResponsestatus =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherDmlUpdateResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlUpdateResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        responsestatus:
          (f = msg.getResponsestatus()) &&
          common_common_pb.ResponseStatus.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlUpdateResponse();
  return proto.io.rulelogic.api.WeatherDmlUpdateResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = new common_common_pb.ResponseStatus();
          reader.readMessage(
            value,
            common_common_pb.ResponseStatus.deserializeBinaryFromReader
          );
          msg.setResponsestatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlUpdateResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getResponsestatus();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        common_common_pb.ResponseStatus.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.setWeather =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional ResponseStatus responseStatus = 2;
 * @return {?proto.io.rulelogic.api.ResponseStatus}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.getResponsestatus =
  function () {
    return /** @type{?proto.io.rulelogic.api.ResponseStatus} */ (
      jspb.Message.getWrapperField(this, common_common_pb.ResponseStatus, 2)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.ResponseStatus|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.setResponsestatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.clearResponsestatus =
  function () {
    return this.setResponsestatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlUpdateResponse.prototype.hasResponsestatus =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.io.rulelogic.api.WeatherDmlUpdateRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlUpdateRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        requestmessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlUpdateRequest();
  return proto.io.rulelogic.api.WeatherDmlUpdateRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRequestmessage(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlUpdateRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getRequestmessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.setWeather = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string requestMessage = 2;
 * @return {string}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.getRequestmessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.setRequestmessage =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlUpdateRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlUpdateRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.io.rulelogic.api.WeatherDmlDeleteResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlDeleteResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        responsestatus:
          (f = msg.getResponsestatus()) &&
          common_common_pb.ResponseStatus.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlDeleteResponse();
  return proto.io.rulelogic.api.WeatherDmlDeleteResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = new common_common_pb.ResponseStatus();
          reader.readMessage(
            value,
            common_common_pb.ResponseStatus.deserializeBinaryFromReader
          );
          msg.setResponsestatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlDeleteResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getResponsestatus();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        common_common_pb.ResponseStatus.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.setWeather =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional ResponseStatus responseStatus = 2;
 * @return {?proto.io.rulelogic.api.ResponseStatus}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.getResponsestatus =
  function () {
    return /** @type{?proto.io.rulelogic.api.ResponseStatus} */ (
      jspb.Message.getWrapperField(this, common_common_pb.ResponseStatus, 2)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.ResponseStatus|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.setResponsestatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteResponse} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.clearResponsestatus =
  function () {
    return this.setResponsestatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlDeleteResponse.prototype.hasResponsestatus =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.io.rulelogic.api.WeatherDmlDeleteRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.io.rulelogic.api.WeatherDmlDeleteRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        weather:
          (f = msg.getWeather()) &&
          proto.io.rulelogic.api.Weather.toObject(includeInstance, f),
        requestmessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        authdetail:
          (f = msg.getAuthdetail()) &&
          common_common_pb.AuthDetail.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.rulelogic.api.WeatherDmlDeleteRequest();
  return proto.io.rulelogic.api.WeatherDmlDeleteRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.io.rulelogic.api.Weather();
          reader.readMessage(
            value,
            proto.io.rulelogic.api.Weather.deserializeBinaryFromReader
          );
          msg.setWeather(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRequestmessage(value);
          break;
        case 10:
          var value = new common_common_pb.AuthDetail();
          reader.readMessage(
            value,
            common_common_pb.AuthDetail.deserializeBinaryFromReader
          );
          msg.setAuthdetail(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.io.rulelogic.api.WeatherDmlDeleteRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        proto.io.rulelogic.api.Weather.serializeBinaryToWriter
      );
    }
    f = message.getRequestmessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getAuthdetail();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        common_common_pb.AuthDetail.serializeBinaryToWriter
      );
    }
  };

/**
 * optional Weather weather = 1;
 * @return {?proto.io.rulelogic.api.Weather}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.getWeather =
  function () {
    return /** @type{?proto.io.rulelogic.api.Weather} */ (
      jspb.Message.getWrapperField(this, proto.io.rulelogic.api.Weather, 1)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.Weather|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.setWeather = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.clearWeather =
  function () {
    return this.setWeather(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.hasWeather =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string requestMessage = 2;
 * @return {string}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.getRequestmessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.setRequestmessage =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional AuthDetail authDetail = 10;
 * @return {?proto.io.rulelogic.api.AuthDetail}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.getAuthdetail =
  function () {
    return /** @type{?proto.io.rulelogic.api.AuthDetail} */ (
      jspb.Message.getWrapperField(this, common_common_pb.AuthDetail, 10)
    );
  };

/**
 * @param {?proto.io.rulelogic.api.AuthDetail|undefined} value
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.setAuthdetail =
  function (value) {
    return jspb.Message.setWrapperField(this, 10, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.io.rulelogic.api.WeatherDmlDeleteRequest} returns this
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.clearAuthdetail =
  function () {
    return this.setAuthdetail(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.rulelogic.api.WeatherDmlDeleteRequest.prototype.hasAuthdetail =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

goog.object.extend(exports, proto.io.rulelogic.api);
